{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["import type { AwsCredentialIdentity } from '@aws-sdk/types';\nimport type { InitOptions } from '.';\n\nconst ENDPOINT_PATTERN = /^(.+\\.)?s3[.-]([a-z0-9-]+)\\./;\n\ninterface BucketInfo {\n  bucket?: string | null;\n  err?: string;\n}\n\nexport function isUrlFromBucket(fileUrl: string, bucketName: string, baseUrl = ''): boolean {\n  const url = new URL(fileUrl);\n\n  // Check if the file URL is using a base URL (e.g. a CDN).\n  // In this case do not sign the URL.\n  if (baseUrl) {\n    return false;\n  }\n\n  const { bucket } = getBucketFromAwsUrl(fileUrl);\n\n  if (bucket) {\n    return bucket === bucketName;\n  }\n\n  // File URL might be of an S3-compatible provider. (or an invalid URL)\n  // In this case, check if the bucket name appears in the URL host or path.\n  // e.g. https://minio.example.com/bucket-name/object-key\n  // e.g. https://bucket.nyc3.digitaloceanspaces.com/folder/img.png\n  return url.host.startsWith(`${bucketName}.`) || url.pathname.includes(`/${bucketName}/`);\n}\n\n/**\n * Parse the bucket name from a URL.\n * See all URL formats in https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-bucket-intro.html\n *\n * @param {string} fileUrl - the URL to parse\n * @returns {object} result\n * @returns {string} result.bucket - the bucket name\n * @returns {string} result.err - if any\n */\nfunction getBucketFromAwsUrl(fileUrl: string): BucketInfo {\n  const url = new URL(fileUrl);\n\n  // S3://<bucket-name>/<key>\n  if (url.protocol === 's3:') {\n    const bucket = url.host;\n\n    if (!bucket) {\n      return { err: `Invalid S3 url: no bucket: ${url}` };\n    }\n    return { bucket };\n  }\n\n  if (!url.host) {\n    return { err: `Invalid S3 url: no hostname: ${url}` };\n  }\n\n  const matches = url.host.match(ENDPOINT_PATTERN);\n  if (!matches) {\n    return { err: `Invalid S3 url: hostname does not appear to be a valid S3 endpoint: ${url}` };\n  }\n\n  const prefix = matches[1];\n  // https://s3.amazonaws.com/<bucket-name>\n  if (!prefix) {\n    if (url.pathname === '/') {\n      return { bucket: null };\n    }\n\n    const index = url.pathname.indexOf('/', 1);\n\n    // https://s3.amazonaws.com/<bucket-name>\n    if (index === -1) {\n      return { bucket: url.pathname.substring(1) };\n    }\n\n    // https://s3.amazonaws.com/<bucket-name>/\n    if (index === url.pathname.length - 1) {\n      return { bucket: url.pathname.substring(1, index) };\n    }\n\n    // https://s3.amazonaws.com/<bucket-name>/key\n    return { bucket: url.pathname.substring(1, index) };\n  }\n\n  // https://<bucket-name>.s3.amazonaws.com/\n  return { bucket: prefix.substring(0, prefix.length - 1) };\n}\n\nexport const extractCredentials = (options: InitOptions): AwsCredentialIdentity | null => {\n  if (options.s3Options?.credentials) {\n    return {\n      accessKeyId: options.s3Options.credentials.accessKeyId,\n      secretAccessKey: options.s3Options.credentials.secretAccessKey,\n    };\n  }\n  return null;\n};\n","import type { ReadStream } from 'node:fs';\nimport { getOr } from 'lodash/fp';\nimport {\n  S3Client,\n  GetObjectCommand,\n  DeleteObjectCommand,\n  DeleteObjectCommandOutput,\n  PutObjectCommandInput,\n  CompleteMultipartUploadCommandOutput,\n  AbortMultipartUploadCommandOutput,\n  S3ClientConfig,\n  ObjectCannedACL,\n} from '@aws-sdk/client-s3';\nimport type { AwsCredentialIdentity } from '@aws-sdk/types';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { Upload } from '@aws-sdk/lib-storage';\nimport { extractCredentials, isUrlFromBucket } from './utils';\n\nexport interface File {\n  name: string;\n  alternativeText?: string;\n  caption?: string;\n  width?: number;\n  height?: number;\n  formats?: Record<string, unknown>;\n  hash: string;\n  ext?: string;\n  mime: string;\n  size: number;\n  sizeInBytes: number;\n  url: string;\n  previewUrl?: string;\n  path?: string;\n  provider?: string;\n  provider_metadata?: Record<string, unknown>;\n  stream?: ReadStream;\n  buffer?: Buffer;\n}\n\nexport type UploadCommandOutput = (\n  | CompleteMultipartUploadCommandOutput\n  | AbortMultipartUploadCommandOutput\n) & {\n  Location: string;\n};\n\nexport interface AWSParams {\n  Bucket: string; // making it required\n  ACL?: ObjectCannedACL;\n  signedUrlExpires?: number;\n}\n\nexport interface DefaultOptions extends S3ClientConfig {\n  // TODO Remove this in V5\n  accessKeyId?: AwsCredentialIdentity['accessKeyId'];\n  secretAccessKey?: AwsCredentialIdentity['secretAccessKey'];\n  // Keep this for V5\n  credentials?: AwsCredentialIdentity;\n  params?: AWSParams;\n  [k: string]: any;\n}\n\nexport type InitOptions = (DefaultOptions | { s3Options: DefaultOptions }) & {\n  baseUrl?: string;\n  rootPath?: string;\n  [k: string]: any;\n};\n\nconst assertUrlProtocol = (url: string) => {\n  // Regex to test protocol like \"http://\", \"https://\"\n  return /^\\w*:\\/\\//.test(url);\n};\n\nconst getConfig = ({ baseUrl, rootPath, s3Options, ...legacyS3Options }: InitOptions) => {\n  if (Object.keys(legacyS3Options).length > 0) {\n    process.emitWarning(\n      \"S3 configuration options passed at root level of the plugin's providerOptions is deprecated and will be removed in a future release. Please wrap them inside the 's3Options:{}' property.\"\n    );\n  }\n  const credentials = extractCredentials({ s3Options, ...legacyS3Options });\n  const config = {\n    ...s3Options,\n    ...legacyS3Options,\n    ...(credentials ? { credentials } : {}),\n  };\n\n  config.params.ACL = getOr(ObjectCannedACL.public_read, ['params', 'ACL'], config);\n\n  return config;\n};\n\nexport default {\n  init({ baseUrl, rootPath, s3Options, ...legacyS3Options }: InitOptions) {\n    // TODO V5 change config structure to avoid having to do this\n    const config = getConfig({ baseUrl, rootPath, s3Options, ...legacyS3Options });\n    const s3Client = new S3Client(config);\n    const filePrefix = rootPath ? `${rootPath.replace(/\\/+$/, '')}/` : '';\n\n    const getFileKey = (file: File) => {\n      const path = file.path ? `${file.path}/` : '';\n      return `${filePrefix}${path}${file.hash}${file.ext}`;\n    };\n\n    const upload = async (file: File, customParams: Partial<PutObjectCommandInput> = {}) => {\n      const fileKey = getFileKey(file);\n      const uploadObj = new Upload({\n        client: s3Client,\n        params: {\n          Bucket: config.params.Bucket,\n          Key: fileKey,\n          Body: file.stream || Buffer.from(file.buffer as any, 'binary'),\n          ACL: config.params.ACL,\n          ContentType: file.mime,\n          ...customParams,\n        },\n      });\n\n      const upload = (await uploadObj.done()) as UploadCommandOutput;\n\n      if (assertUrlProtocol(upload.Location)) {\n        file.url = baseUrl ? `${baseUrl}/${fileKey}` : upload.Location;\n      } else {\n        // Default protocol to https protocol\n        file.url = `https://${upload.Location}`;\n      }\n    };\n\n    return {\n      isPrivate() {\n        return config.params.ACL === 'private';\n      },\n\n      async getSignedUrl(file: File, customParams: any): Promise<{ url: string }> {\n        // Do not sign the url if it does not come from the same bucket.\n        if (!isUrlFromBucket(file.url, config.params.Bucket, baseUrl)) {\n          return { url: file.url };\n        }\n        const fileKey = getFileKey(file);\n\n        const url = await getSignedUrl(\n          // @ts-expect-error - TODO fix client type\n          s3Client,\n          new GetObjectCommand({\n            Bucket: config.params.Bucket,\n            Key: fileKey,\n            ...customParams,\n          }),\n          {\n            expiresIn: getOr(15 * 60, ['params', 'signedUrlExpires'], config),\n          }\n        );\n\n        return { url };\n      },\n      uploadStream(file: File, customParams = {}) {\n        return upload(file, customParams);\n      },\n      upload(file: File, customParams = {}) {\n        return upload(file, customParams);\n      },\n      delete(file: File, customParams = {}): Promise<DeleteObjectCommandOutput> {\n        const command = new DeleteObjectCommand({\n          Bucket: config.params.Bucket,\n          Key: getFileKey(file),\n          ...customParams,\n        });\n        return s3Client.send(command);\n      },\n    };\n  },\n};\n"],"names":["ENDPOINT_PATTERN","isUrlFromBucket","fileUrl","bucketName","baseUrl","url","URL","bucket","getBucketFromAwsUrl","host","startsWith","pathname","includes","protocol","err","matches","match","prefix","index","indexOf","substring","length","extractCredentials","options","s3Options","credentials","accessKeyId","secretAccessKey","assertUrlProtocol","test","getConfig","rootPath","legacyS3Options","Object","keys","process","emitWarning","config","params","ACL","getOr","ObjectCannedACL","public_read","init","s3Client","S3Client","filePrefix","replace","getFileKey","file","path","hash","ext","upload","customParams","fileKey","uploadObj","Upload","client","Bucket","Key","Body","stream","Buffer","from","buffer","ContentType","mime","done","Location","isPrivate","getSignedUrl","GetObjectCommand","expiresIn","uploadStream","delete","command","DeleteObjectCommand","send"],"mappings":"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"}